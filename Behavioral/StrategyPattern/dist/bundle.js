(()=>{"use strict";class e{setFlyBeaviour(e){this.flyBehaviour=e}setQuackBehaviour(e){this.quackBehaviour=e}performFly(){var e;null===(e=this.flyBehaviour)||void 0===e||e.fly()}performQuack(){var e;null===(e=this.quackBehaviour)||void 0===e||e.quack()}swim(){console.log("All ducks float, even decoys!")}}class s{constructor(e,s){this.name=e,this.device=s}runDevice(){var e;null===(e=this.device)||void 0===e||e.quack()}}class l{fly(){return console.log("I'm flying!!")}}class o{fly(){return console.log("I can't fly!!")}}class a{fly(){console.log("flies but does not say it is implementing FlyBehavior, still works")}}class c{quack(){return console.log("I'm quacking!!")}}class r{quack(){console.log("Quack! Quack!")}}class i extends e{constructor(){super(...arguments),this.flybehavior=new o,this.quackBehavior=new c}display(){console.log("I am just a model duck")}}class n extends e{constructor(){super(...arguments),this.flyBehavior=new l,this.quackBehavior=new c}display(){console.log("I'm a mallard")}}(new class{run(){const e=new n;e.performFly(),e.performQuack(),e.display();const l=new i;l.performFly(),l.setFlyBeaviour(new a),l.performFly(),l.display(),new s("h√ºnter",new r).runDevice()}}).run()})();
//# sourceMappingURL=bundle.js.map